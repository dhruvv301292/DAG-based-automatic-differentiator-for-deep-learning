import numpy as np
from mytorch import tensor
from mytorch.tensor import Tensor
from mytorch.nn.module import Module
from mytorch.nn.activations import Tanh, ReLU, Sigmoid
from mytorch.nn.util import PackedSequence, pack_sequence, unpack_sequence


class RNNUnit(Module):
    '''
    This class defines a single RNN Unit block.

    Args:
        input_size (int): # features in each timestep
        hidden_size (int): # features generated by the RNNUnit at each timestep
        nonlinearity (string): Non-linearity to be applied the result of matrix operations 
    '''

    def __init__(self, input_size, hidden_size, nonlinearity = 'tanh' ):
        
        super(RNNUnit,self).__init__()
        
        # Initializing parameters
        self.weight_ih = Tensor(np.random.randn(hidden_size,input_size), requires_grad=True, is_parameter=True)
        self.bias_ih   = Tensor(np.zeros(hidden_size), requires_grad=True, is_parameter=True)
        self.weight_hh = Tensor(np.random.randn(hidden_size,hidden_size), requires_grad=True, is_parameter=True)
        self.bias_hh   = Tensor(np.zeros(hidden_size), requires_grad=True, is_parameter=True)

        self.hidden_size = hidden_size
        
        # Setting the Activation Unit
        if nonlinearity == 'tanh':
            self.act = Tanh()
        elif nonlinearity == 'relu':
            self.act = ReLU()

    def __call__(self, input, hidden = None):
        return self.forward(input,hidden)

    def forward(self, input, hidden = None):
        '''
        Args:
            input (Tensor): (effective_batch_size,input_size)
            hidden (Tensor,None): (effective_batch_size,hidden_size)
        Return:
            Tensor: (effective_batch_size,hidden_size)
        '''
        
        # INSTRUCTIONS
        # Perform matrix operations to construct the intermediary value from input and hidden tensors
        # Apply the activation on the resultant
        # Remember to handle the case when hidden = None. Construct a tensor of appropriate size, filled with 0s to use as the hidden.
        
        if hidden == None:
            hidden  = tensor.Tensor(np.zeros(shape=(input.shape[0], self.hidden_size)), requires_grad=True)

        return self.act(((input @ self.weight_ih.T()) + self.bias_ih) + ((hidden @ self.weight_hh.T()) + self.bias_hh))


class TimeIterator(Module):
    '''
    For a given input this class iterates through time by processing the entire
    seqeunce of timesteps. Can be thought to represent a single layer for a 
    given basic unit which is applied at each time step.
    
    Args:
        basic_unit (Class): RNNUnit or GRUUnit. This class is used to instantiate the unit that will be used to process the inputs
        input_size (int): # features in each timestep
        hidden_size (int): # features generated by the RNNUnit at each timestep
        nonlinearity (string): Non-linearity to be applied the result of matrix operations 

    '''

    def __init__(self, basic_unit, input_size, hidden_size, nonlinearity = 'tanh' ):
        super(TimeIterator,self).__init__()

        # basic_unit can either be RNNUnit or GRUUnit
        self.unit = basic_unit(input_size,hidden_size,nonlinearity)    

    def __call__(self, input, hidden = None):
        return self.forward(input,hidden)
    
    def forward(self,input,hidden = None):
        
        '''
        NOTE: Please get a good grasp on util.PackedSequence before attempting this.

        Args:
            input (PackedSequence): input.data is tensor of shape ( total number of timesteps (sum) across all samples in the batch, input_size)
            hidden (Tensor, None): (batch_size, hidden_size)
        Returns:
            PackedSequence: ( total number of timesteps (sum) across all samples in the batch, hidden_size)
            Tensor (batch_size,hidden_size): This is the hidden generated by the last time step for each sample joined together.
        '''
        
        # Resolve the PackedSequence into its components
        data, sorted_indices, batch_sizes = input
        
        # INSTRUCTIONS
        # Iterate over appropriate segments of the "data" tensor to pass same timesteps across all samples in the batch simultaneously to the unit for processing.
        # Remember to account for scenarios when effective_batch_size changes between one iteration to the next
        start_index = 0
        finalstate_tensor = None
        finalstate_list = []
        packed_tensor = None

        for batch_size in batch_sizes:
            curr_input = data[start_index:start_index+batch_size]
            if hidden == None:
                hidden = self.unit(curr_input, hidden)
            else:
                if curr_input.shape[0] < hidden.shape[0]:
                    # remove excess rows from hidden and store in out_tensor for PackedSequence
                    # pass shaved hidden to next rnn unit to generate next hidden state
                    #start
                    cat_tensor = hidden[curr_input.shape[0]:] # for unsqueezing
                    if len(cat_tensor.shape) < len(hidden.shape):
                        cat_tensor = cat_tensor.unsqueeze()
                    finalstate_list.append(cat_tensor)
                    hidden = hidden[:curr_input.shape[0]]
                #stop
                hidden = self.unit(curr_input, hidden)
            if packed_tensor == None:
                packed_tensor = hidden
            else:
                packed_tensor = tensor.cat([packed_tensor, hidden])
            start_index += batch_size
            if start_index == data.shape[0]:
                finalstate_list.append(hidden)

        for t in reversed(finalstate_list):
            if finalstate_tensor == None:
                finalstate_tensor = t
            else:
                finalstate_tensor = tensor.cat([finalstate_tensor, t])

        return pack_sequence([packed_tensor]), finalstate_tensor





class RNN(TimeIterator):
    '''
    Child class for TimeIterator which appropriately initializes the parent class to construct an RNN.
    Args:
        input_size (int): # features in each timestep
        hidden_size (int): # features generated by the RNNUnit at each timestep
        nonlinearity (string): Non-linearity to be applied the result of matrix operations 
    '''

    def __init__(self, input_size, hidden_size, nonlinearity = 'tanh' ):
        super ( RNN, self ).__init__ (RNNUnit, input_size, hidden_size, nonlinearity)

